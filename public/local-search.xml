<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>准备工作</title>
    <link href="/2024/06/24/%E5%BC%80%E5%A7%8B/"/>
    <url>/2024/06/24/%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<p>1、搭建一个小程序<br>2、部署一个服务器<br>3、做好营销  </p><h2 id="如何搭建小程序"><a href="#如何搭建小程序" class="headerlink" title="如何搭建小程序"></a>如何搭建小程序</h2><ol><li><p><strong>注册微信小程序账号</strong></p><ul><li>访问<a href="https://mp.weixin.qq.com/">微信公众平台</a>，注册一个小程序账号。</li></ul></li><li><p><strong>下载并安装开发者工具</strong></p><ul><li>下载<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a>并安装。</li></ul></li><li><p><strong>创建小程序项目</strong></p><ul><li>打开开发者工具，使用注册的微信小程序账号登录。</li><li>点击“新建项目”，填写项目名称、目录和AppID（可在公众平台获取）。</li></ul></li><li><p><strong>开发小程序</strong></p><ul><li>使用开发者工具提供的代码编辑器编写小程序代码。</li><li>参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信小程序开发文档</a>进行开发。</li></ul></li><li><p><strong>调试和预览</strong></p><ul><li>在开发者工具中进行代码调试和预览。</li></ul></li><li><p><strong>提交审核</strong></p><ul><li>开发完成后，提交小程序代码进行审核。</li></ul></li><li><p><strong>发布上线</strong></p><ul><li>审核通过后，即可发布小程序上线。</li></ul></li></ol><h2 id="如何部署服务器"><a href="#如何部署服务器" class="headerlink" title="如何部署服务器"></a>如何部署服务器</h2><p>搭建小程序的后端服务器通常涉及以下几个步骤：</p><p>选择服务器和操作系统：</p><ul><li>你可以选择云服务提供商（如阿里云、腾讯云、AWS等）来租用服务器。<br>选择适合的操作系统，如Linux（Ubuntu、CentOS等）。<br>安装必要的软件：</li></ul><p>安装Web服务器软件，如Nginx或Apache。</p><ul><li>安装数据库，如MySQL、PostgreSQL或MongoDB。<br>安装编程语言环境，如Node.js、Python、Java等。<br>编写后端代码：</li></ul><p>使用选择的编程语言编写后端逻辑，处理小程序的请求和数据。</p><ul><li>可以使用框架（如Express.js for Node.js、Django for Python等）来简化开发。<br>配置服务器：</li></ul><p>配置Web服务器以托管你的后端应用。<br>配置数据库以存储和检索数据。<br>配置防火墙和安全组以保护服务器。<br>部署应用：</p><p>将你的后端代码部署到服务器上。<br>确保所有依赖项都已安装并配置正确。<br>测试和调试：</p><p>使用工具（如Postman）测试API端点。<br>确保服务器能够正确处理请求并返回预期的响应。<br>域名和SSL证书：</p><p>注册一个域名并将其指向你的服务器。<br>安装SSL证书以启用HTTPS，确保数据传输的安全性。<br>监控和维护：</p><p>设置监控工具以跟踪服务器的性能和可用性。<br>定期更新软件和依赖项，以确保服务器的安全性和稳定性。</p>]]></content>
    
    
    <categories>
      
      <category>小程序开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>商分笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>架构评审关注点</title>
    <link href="/2024/06/24/%E6%9E%B6%E6%9E%84%E8%AF%84%E5%AE%A1%E5%85%B3%E6%B3%A8%E7%82%B9/"/>
    <url>/2024/06/24/%E6%9E%B6%E6%9E%84%E8%AF%84%E5%AE%A1%E5%85%B3%E6%B3%A8%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>本文总结常见的架构关注点</p><h2 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h2><p>服务拆分考虑的核心问题时协作问题和管理问题  </p><ul><li>问题拆解：复杂系统拆解成小系统管理难度更小，学习成本更低</li><li>协作问题：业务发展带来组织细分，组织细分引发协作问题，不同组织在迭代节奏方面不完全匹配，迭代时互相影响较大，常见问题包括两类：运维协作和代码协作。代码协作上的常见问题是合代码冲突与交叉修改、影响面评估困难；运维协作上的问题是，无法给各自模块定制化运维（如发版、扩容），以及各模块间的功能共用底层资源可能互相影响</li><li>系统异构：如果需要引入不同体系的技术栈，常见的方法就是约定协议后拆分相关业务到新的技术栈系统中</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>架构设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>订单系统(OFC)架构设计</title>
    <link href="/2024/06/24/%E8%AE%A2%E5%8D%95%E9%A2%86%E5%9F%9F%E5%BB%BA%E8%AE%BE/"/>
    <url>/2024/06/24/%E8%AE%A2%E5%8D%95%E9%A2%86%E5%9F%9F%E5%BB%BA%E8%AE%BE/</url>
    
    <content type="html"><![CDATA[<p>在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。</p><h2 id="技术挑战"><a href="#技术挑战" class="headerlink" title="技术挑战"></a>技术挑战</h2><p>面临的挑战与业务特点有关，订单访问QPS100万，峰值提单400万，概括而言就是大流量5000万单、高并发、多业务线<br>主要的解决手段是流量拆分、业务隔离、读写流量拆分、存储异构</p><h2 id="架构演进"><a href="#架构演进" class="headerlink" title="架构演进"></a>架构演进</h2><p>不同阶段要解决的主要问题时不一样的</p><table><thead><tr><th>阶段</th><th>业务特征</th><th>系统特征</th><th>主要挑战</th><th>解决方案</th></tr></thead><tbody><tr><td>订单模块</td><td>从0快速开始，单量小，业务简单</td><td>公共系统</td><td>迭代效率</td><td>支持快速发布、快速试错，jar包复用彼此功能，公用数据库</td></tr><tr><td>订单系统</td><td>单量到10万，业务流程复杂</td><td>独立系统</td><td>组织划分变化，代码复杂性上升</td><td>独立成内聚的服务，独占数据库</td></tr><tr><td>订单系统域</td><td>组织扩展+快速膨胀</td><td>系统群</td><td>数据膨胀，读写压力增加</td><td>读写分离、功能解耦进一步的服务拆分、非骨干链路异步化。可将订单系统拆分为查询、交易、异步处理、统计处理四个子模块</td></tr><tr><td>单元化订单系统域</td><td>容灾，业务快速扩展，2000万单</td><td>单元化系统群</td><td>存储瓶颈、机房瓶颈</td><td>将数据和服务切分为多个逻辑单元、控制流量的分配、数据互备</td></tr><tr><td>订单平台</td><td>降本增效，交易能力复用</td><td></td><td></td><td></td></tr></tbody></table><p>F&amp;Q  </p><p>为什么不建议无限制的增加从库数量？ </p><ul><li>主库负载增加：在MySQL复制架构中，主库负责生成并发送二进制日志（binlog）给所有从库。当从库数量增加时，主库需要向更多的从库发送相同的二进制日志，这会增加主库的网络I&#x2F;O负载和CPU负载。尽管发送二进制日志是一个相对轻量级的操作，但当从库数量非常多时，这种负载的累积也可能成为主库的瓶颈。</li><li>网络带宽和延迟：在分布式环境中，从库可能分布在不同的地理位置，网络带宽和延迟会影响二进制日志的传输效率。从库越多，受网络条件限制的可能性越大，特别是当一些从库位于网络条件较差的地区时，复制延迟的问题会更加明显。</li><li>从库处理能力：从库需要接收并应用主库发送过来的二进制日志。这个过程涉及到日志的解析和数据的写入操作，会占用从库的CPU和I&#x2F;O资源。如果从库的硬件资源不足以快速处理这些操作，或者从库上有大量的读取请求竞争资源，也会导致复制延迟。</li><li>锁竞争：在某些情况下，从库应用二进制日志时可能会遇到锁竞争的问题，尤其是当复制的操作涉及到大量行锁或表锁时。锁竞争会延迟从库应用二进制日志的速度，从而导致复制延迟。</li><li>复制配置和管理：从库过多也意味着复制架构更加复杂，需要更多的管理和监控工作。不恰当的复制配置或监控不足可能导致复制延迟问题被忽视，或者延迟问题的诊断和解决变得更加困难。</li><li>总的来说，从库过多可能会从多个方面增加系统的复杂性和负载，导致复制延迟。在设计和部署MySQL复制架构时，需要综合考虑从库的数量、硬件资源、网络条件等因素，以确保复制的高效和稳定。</li></ul><p>单元化的设计关键是什么？</p><ul><li>如何路由流量：建设路由服务，通过用户信息将流量路由到不同的单元</li><li>如何同步数据</li><li>如何迁移流量（发生问题时）</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交易履约</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新业务市场分析</title>
    <link href="/2024/01/22/%E6%96%B0%E4%B8%9A%E5%8A%A1%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90/"/>
    <url>/2024/01/22/%E6%96%B0%E4%B8%9A%E5%8A%A1%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>1、如何定义市场<br>2、使用PMF做分析<br>3、做好营销  </p><h2 id="如何定义市场"><a href="#如何定义市场" class="headerlink" title="如何定义市场"></a>如何定义市场</h2><p>市场的概念：所谓市场值得是满足了<strong>某类人或组织</strong>的<strong>某个需求</strong>。定义市场时不能忽略组织，因为组织是付费的主力军。举个例子，目前Windows的大多数付费都来自企业。<br>在定义市场前，需要了解市场的两个特点：动态性和模糊性。所谓动态性，指的是需求可能没变，但满足需求的方式变了。典型案例：拍摄市场，从胶卷相机过渡到手机。所以需要明白，当满足需求的方式变了后，市场就变了。所谓模糊性，指的是市场不是固定的，会随着社会变化发生解构和融合。<br>了解这两个特点后，接下来需要深层次理解需求，搞清楚逻辑，把握颗粒度和精准度，颗粒度典型案例：理想汽车，精准度典型案例：博客<br>最后一步是给我们的市场定义计算TAM，切记不能过于乐观，要客观可推敲</p><h2 id="使用PMF做分析"><a href="#使用PMF做分析" class="headerlink" title="使用PMF做分析"></a>使用PMF做分析</h2><p>PMF的核心是搞清楚如何用产品去匹配市场。常见的PMF有三类，产品创造市场，产品挤兑市场，产品适配市场。<br>产品创造市场：通过新技术创造市场。一般是技术革新推动的，比如手机之前拍照能力差，无法动摇胶卷相机，但当手机拍照能力跟上相机后，就会产生一个新的市场<br>产品挤兑市场：通过更低的成本去动摇老市场。<br>产品适配市场：通过更好的服务区动摇老市场中的细分领域。</p><h2 id="做好营销"><a href="#做好营销" class="headerlink" title="做好营销"></a>做好营销</h2><p>产品做的好，营销做不好会影响市场抢占的速度，最终竞争失败。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>交易的三要素是：流量、供给、履约<br>流量的组织形式大体分为两种，店铺和商品。店铺组织形式代表了一类客群的消费主张，典型的就是淘宝天猫；商品组织形式容易产生爆品，以此聚集流量利于优化供应链，典型的就是拼多多。</p>]]></content>
    
    
    <categories>
      
      <category>商业分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>商分笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>履约系统(OFC)架构设计</title>
    <link href="/2024/01/22/%E5%B1%A5%E7%BA%A6%E7%B3%BB%E7%BB%9F%E5%BB%BA%E8%AE%BE%E8%B7%AF%E5%BE%84/"/>
    <url>/2024/01/22/%E5%B1%A5%E7%BA%A6%E7%B3%BB%E7%BB%9F%E5%BB%BA%E8%AE%BE%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p>在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>概括而言，一次网购交易包括：<br>注册 -&gt; 导购 -&gt; 加购 -&gt; 提单 -&gt; 支付 -&gt; 接单 -&gt; 计划 -&gt; 调度 -&gt; 生产 -&gt; 配送 -&gt; 完成 -&gt; 售后<br>OFC在电商交易中一般负责接单、计划、调度三个环节</p><h2 id="架构重点"><a href="#架构重点" class="headerlink" title="架构重点"></a>架构重点</h2><p>OFC的核心架构目标是保障履约顺利达成，同时兼顾低成本、高时效等通用业务目标。因此，架构设计重点关注两个问题：</p><ul><li>稳定性：稳定履约是业务团队对OFC最低限度的诉求。OFC作为履约流程的”指挥员”，对上承接渠道网关、交易系统的流量，对下需协调财务、库存、仓储等基础系统，任何环节出错均可能阻断履约，造成卡单</li><li>迭代质效：完成履约基建的建设后，OFC需持续集成运营策略，提升系统吞吐，覆盖更多履约场景。因此，需求迭代的质效是OFC重点关注的另一个问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交易履约</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/22/hello-world/"/>
    <url>/2024/01/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
