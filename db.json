{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[],"Cache":[{"_id":"source/.DS_Store","hash":"08edf351fb42f706ed47e14574beee86816f00df","modified":1706493187611},{"_id":"source/_posts/开始.md","hash":"9d93f263bc5bf166f6e857168ce8cb742c8cc20e","modified":1720517970851},{"_id":"source/_posts/履约系统建设路径.md","hash":"c235cd4e42e79bd505a3f6186d93671e3519ba8f","modified":1719194882011},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1705904871676},{"_id":"source/_posts/新业务市场分析.md","hash":"ac84b26a5a6b2ac45912b1086f074e4b643b6237","modified":1719197971218},{"_id":"source/_posts/架构评审关注点.md","hash":"24042f89286341a8a89277fa6c0a64ef2e251cc2","modified":1726282837648},{"_id":"source/_posts/订单领域建设.md","hash":"61455a8b31151681435d5f31c22ca98e906d8acc","modified":1719286498232},{"_id":"source/about/index.md","hash":"583834946dda0aee27f010fd25a855bb5e27e76c","modified":1705910220452},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/2024/06/24/开始/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/2024/06/24/架构评审关注点/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/2024/06/24/订单领域建设/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/2024/01/22/新业务市场分析/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/2024/01/22/履约系统建设路径/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/2024/01/22/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/categories/技术总结/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/categories/小程序开发/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/categories/商业分析/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/archives/2024/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/archives/2024/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/archives/2024/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/tags/交易履约/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/tags/商分笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416},{"_id":"public/tags/架构设计/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1726626026416}],"Category":[{"name":"技术总结","_id":"cm178k0pk0004isei5x28e0cu"},{"name":"小程序开发","_id":"cm178k0pl0006iseihwbn29sm"},{"name":"商业分析","_id":"cm178k0pn000eiseibl0hd0ny"}],"Data":[],"Page":[{"title":"about","date":"2024-01-22T07:57:00.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-01-22 15:57:00\n---\n","updated":"2024-01-22T07:57:00.452Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm178k0pg0000isei7o6sdv3h","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-01-22T06:27:51.676Z","updated":"2024-01-22T06:27:51.676Z","comments":1,"layout":"post","photos":[],"_id":"cm178k0ph0001isei58od1gxs","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"履约系统(OFC)架构设计","comment":true,"description":"在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。","_content":"在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。\n\n## 流程分析\n\n概括而言，一次网购交易包括：  \n注册 -> 导购 -> 加购 -> 提单 -> 支付 -> 接单 -> 计划 -> 调度 -> 生产 -> 配送 -> 完成 -> 售后  \nOFC在电商交易中一般负责接单、计划、调度三个环节\n\n## 架构重点\n\nOFC的核心架构目标是保障履约顺利达成，同时兼顾低成本、高时效等通用业务目标。因此，架构设计重点关注两个问题：\n\n- 稳定性：稳定履约是业务团队对OFC最低限度的诉求。OFC作为履约流程的\"指挥员\"，对上承接渠道网关、交易系统的流量，对下需协调财务、库存、仓储等基础系统，任何环节出错均可能阻断履约，造成卡单\n- 迭代质效：完成履约基建的建设后，OFC需持续集成运营策略，提升系统吞吐，覆盖更多履约场景。因此，需求迭代的质效是OFC重点关注的另一个问题\n","source":"_posts/履约系统建设路径.md","raw":"---\ntitle: 履约系统(OFC)架构设计\ncomment: true\ndescription: 在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。\ncategories:\n- 技术总结\ntags:\n- 交易履约\n---\n在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。\n\n## 流程分析\n\n概括而言，一次网购交易包括：  \n注册 -> 导购 -> 加购 -> 提单 -> 支付 -> 接单 -> 计划 -> 调度 -> 生产 -> 配送 -> 完成 -> 售后  \nOFC在电商交易中一般负责接单、计划、调度三个环节\n\n## 架构重点\n\nOFC的核心架构目标是保障履约顺利达成，同时兼顾低成本、高时效等通用业务目标。因此，架构设计重点关注两个问题：\n\n- 稳定性：稳定履约是业务团队对OFC最低限度的诉求。OFC作为履约流程的\"指挥员\"，对上承接渠道网关、交易系统的流量，对下需协调财务、库存、仓储等基础系统，任何环节出错均可能阻断履约，造成卡单\n- 迭代质效：完成履约基建的建设后，OFC需持续集成运营策略，提升系统吞吐，覆盖更多履约场景。因此，需求迭代的质效是OFC重点关注的另一个问题\n","slug":"履约系统建设路径","published":1,"date":"2024-01-22T08:21:11.541Z","updated":"2024-06-24T02:08:02.011Z","comments":1,"layout":"post","photos":[],"_id":"cm178k0pj0002isei1z0k2lzr","content":"<p>在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。</p>\n<h2 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><p>概括而言，一次网购交易包括：<br>注册 -&gt; 导购 -&gt; 加购 -&gt; 提单 -&gt; 支付 -&gt; 接单 -&gt; 计划 -&gt; 调度 -&gt; 生产 -&gt; 配送 -&gt; 完成 -&gt; 售后<br>OFC在电商交易中一般负责接单、计划、调度三个环节</p>\n<h2 id=\"架构重点\"><a href=\"#架构重点\" class=\"headerlink\" title=\"架构重点\"></a>架构重点</h2><p>OFC的核心架构目标是保障履约顺利达成，同时兼顾低成本、高时效等通用业务目标。因此，架构设计重点关注两个问题：</p>\n<ul>\n<li>稳定性：稳定履约是业务团队对OFC最低限度的诉求。OFC作为履约流程的”指挥员”，对上承接渠道网关、交易系统的流量，对下需协调财务、库存、仓储等基础系统，任何环节出错均可能阻断履约，造成卡单</li>\n<li>迭代质效：完成履约基建的建设后，OFC需持续集成运营策略，提升系统吞吐，覆盖更多履约场景。因此，需求迭代的质效是OFC重点关注的另一个问题</li>\n</ul>\n","excerpt":"","more":"<p>在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。</p>\n<h2 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><p>概括而言，一次网购交易包括：<br>注册 -&gt; 导购 -&gt; 加购 -&gt; 提单 -&gt; 支付 -&gt; 接单 -&gt; 计划 -&gt; 调度 -&gt; 生产 -&gt; 配送 -&gt; 完成 -&gt; 售后<br>OFC在电商交易中一般负责接单、计划、调度三个环节</p>\n<h2 id=\"架构重点\"><a href=\"#架构重点\" class=\"headerlink\" title=\"架构重点\"></a>架构重点</h2><p>OFC的核心架构目标是保障履约顺利达成，同时兼顾低成本、高时效等通用业务目标。因此，架构设计重点关注两个问题：</p>\n<ul>\n<li>稳定性：稳定履约是业务团队对OFC最低限度的诉求。OFC作为履约流程的”指挥员”，对上承接渠道网关、交易系统的流量，对下需协调财务、库存、仓储等基础系统，任何环节出错均可能阻断履约，造成卡单</li>\n<li>迭代质效：完成履约基建的建设后，OFC需持续集成运营策略，提升系统吞吐，覆盖更多履约场景。因此，需求迭代的质效是OFC重点关注的另一个问题</li>\n</ul>\n"},{"title":"准备工作","comment":false,"description":"如何搭建一个小程序","_content":"1、搭建一个小程序  \n2、部署一个服务器\n3、做好营销  \n\n\n## 如何搭建小程序\n\n1. **注册微信小程序账号**\n    - 访问[微信公众平台](https://mp.weixin.qq.com/)，注册一个小程序账号。\n\n2. **下载并安装开发者工具**\n    - 下载[微信开发者工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)并安装。\n\n3. **创建小程序项目**\n    - 打开开发者工具，使用注册的微信小程序账号登录。\n    - 点击“新建项目”，填写项目名称、目录和AppID（可在公众平台获取）。\n\n4. **开发小程序**\n    - 使用开发者工具提供的代码编辑器编写小程序代码。\n    - 参考[微信小程序开发文档](https://developers.weixin.qq.com/miniprogram/dev/framework/)进行开发。\n\n5. **调试和预览**\n    - 在开发者工具中进行代码调试和预览。\n\n6. **提交审核**\n    - 开发完成后，提交小程序代码进行审核。\n\n7. **发布上线**\n    - 审核通过后，即可发布小程序上线。\n\n## 如何部署服务器\n\n搭建小程序的后端服务器通常涉及以下几个步骤：\n\n选择服务器和操作系统：\n\n- 你可以选择云服务提供商（如阿里云、腾讯云、AWS等）来租用服务器。\n选择适合的操作系统，如Linux（Ubuntu、CentOS等）。\n安装必要的软件：\n\n安装Web服务器软件，如Nginx或Apache。\n- 安装数据库，如MySQL、PostgreSQL或MongoDB。\n安装编程语言环境，如Node.js、Python、Java等。\n编写后端代码：\n\n使用选择的编程语言编写后端逻辑，处理小程序的请求和数据。\n- 可以使用框架（如Express.js for Node.js、Django for Python等）来简化开发。\n配置服务器：\n\n配置Web服务器以托管你的后端应用。\n配置数据库以存储和检索数据。\n配置防火墙和安全组以保护服务器。\n部署应用：\n\n将你的后端代码部署到服务器上。\n确保所有依赖项都已安装并配置正确。\n测试和调试：\n\n使用工具（如Postman）测试API端点。\n确保服务器能够正确处理请求并返回预期的响应。\n域名和SSL证书：\n\n注册一个域名并将其指向你的服务器。\n安装SSL证书以启用HTTPS，确保数据传输的安全性。\n监控和维护：\n\n设置监控工具以跟踪服务器的性能和可用性。\n定期更新软件和依赖项，以确保服务器的安全性和稳定性。","source":"_posts/开始.md","raw":"---\ntitle: 准备工作\ncomment: false\ndescription: 如何搭建一个小程序\ncategories:\n- 小程序开发\ntags:\n- 商分笔记\n---\n1、搭建一个小程序  \n2、部署一个服务器\n3、做好营销  \n\n\n## 如何搭建小程序\n\n1. **注册微信小程序账号**\n    - 访问[微信公众平台](https://mp.weixin.qq.com/)，注册一个小程序账号。\n\n2. **下载并安装开发者工具**\n    - 下载[微信开发者工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)并安装。\n\n3. **创建小程序项目**\n    - 打开开发者工具，使用注册的微信小程序账号登录。\n    - 点击“新建项目”，填写项目名称、目录和AppID（可在公众平台获取）。\n\n4. **开发小程序**\n    - 使用开发者工具提供的代码编辑器编写小程序代码。\n    - 参考[微信小程序开发文档](https://developers.weixin.qq.com/miniprogram/dev/framework/)进行开发。\n\n5. **调试和预览**\n    - 在开发者工具中进行代码调试和预览。\n\n6. **提交审核**\n    - 开发完成后，提交小程序代码进行审核。\n\n7. **发布上线**\n    - 审核通过后，即可发布小程序上线。\n\n## 如何部署服务器\n\n搭建小程序的后端服务器通常涉及以下几个步骤：\n\n选择服务器和操作系统：\n\n- 你可以选择云服务提供商（如阿里云、腾讯云、AWS等）来租用服务器。\n选择适合的操作系统，如Linux（Ubuntu、CentOS等）。\n安装必要的软件：\n\n安装Web服务器软件，如Nginx或Apache。\n- 安装数据库，如MySQL、PostgreSQL或MongoDB。\n安装编程语言环境，如Node.js、Python、Java等。\n编写后端代码：\n\n使用选择的编程语言编写后端逻辑，处理小程序的请求和数据。\n- 可以使用框架（如Express.js for Node.js、Django for Python等）来简化开发。\n配置服务器：\n\n配置Web服务器以托管你的后端应用。\n配置数据库以存储和检索数据。\n配置防火墙和安全组以保护服务器。\n部署应用：\n\n将你的后端代码部署到服务器上。\n确保所有依赖项都已安装并配置正确。\n测试和调试：\n\n使用工具（如Postman）测试API端点。\n确保服务器能够正确处理请求并返回预期的响应。\n域名和SSL证书：\n\n注册一个域名并将其指向你的服务器。\n安装SSL证书以启用HTTPS，确保数据传输的安全性。\n监控和维护：\n\n设置监控工具以跟踪服务器的性能和可用性。\n定期更新软件和依赖项，以确保服务器的安全性和稳定性。","slug":"开始","published":1,"date":"2024-06-24T02:59:31.217Z","updated":"2024-07-09T09:39:30.851Z","comments":1,"layout":"post","photos":[],"_id":"cm178k0pk0003iseih4nbbkgb","content":"<p>1、搭建一个小程序<br>2、部署一个服务器<br>3、做好营销  </p>\n<h2 id=\"如何搭建小程序\"><a href=\"#如何搭建小程序\" class=\"headerlink\" title=\"如何搭建小程序\"></a>如何搭建小程序</h2><ol>\n<li><p><strong>注册微信小程序账号</strong></p>\n<ul>\n<li>访问<a href=\"https://mp.weixin.qq.com/\">微信公众平台</a>，注册一个小程序账号。</li>\n</ul>\n</li>\n<li><p><strong>下载并安装开发者工具</strong></p>\n<ul>\n<li>下载<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">微信开发者工具</a>并安装。</li>\n</ul>\n</li>\n<li><p><strong>创建小程序项目</strong></p>\n<ul>\n<li>打开开发者工具，使用注册的微信小程序账号登录。</li>\n<li>点击“新建项目”，填写项目名称、目录和AppID（可在公众平台获取）。</li>\n</ul>\n</li>\n<li><p><strong>开发小程序</strong></p>\n<ul>\n<li>使用开发者工具提供的代码编辑器编写小程序代码。</li>\n<li>参考<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序开发文档</a>进行开发。</li>\n</ul>\n</li>\n<li><p><strong>调试和预览</strong></p>\n<ul>\n<li>在开发者工具中进行代码调试和预览。</li>\n</ul>\n</li>\n<li><p><strong>提交审核</strong></p>\n<ul>\n<li>开发完成后，提交小程序代码进行审核。</li>\n</ul>\n</li>\n<li><p><strong>发布上线</strong></p>\n<ul>\n<li>审核通过后，即可发布小程序上线。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"如何部署服务器\"><a href=\"#如何部署服务器\" class=\"headerlink\" title=\"如何部署服务器\"></a>如何部署服务器</h2><p>搭建小程序的后端服务器通常涉及以下几个步骤：</p>\n<p>选择服务器和操作系统：</p>\n<ul>\n<li>你可以选择云服务提供商（如阿里云、腾讯云、AWS等）来租用服务器。<br>选择适合的操作系统，如Linux（Ubuntu、CentOS等）。<br>安装必要的软件：</li>\n</ul>\n<p>安装Web服务器软件，如Nginx或Apache。</p>\n<ul>\n<li>安装数据库，如MySQL、PostgreSQL或MongoDB。<br>安装编程语言环境，如Node.js、Python、Java等。<br>编写后端代码：</li>\n</ul>\n<p>使用选择的编程语言编写后端逻辑，处理小程序的请求和数据。</p>\n<ul>\n<li>可以使用框架（如Express.js for Node.js、Django for Python等）来简化开发。<br>配置服务器：</li>\n</ul>\n<p>配置Web服务器以托管你的后端应用。<br>配置数据库以存储和检索数据。<br>配置防火墙和安全组以保护服务器。<br>部署应用：</p>\n<p>将你的后端代码部署到服务器上。<br>确保所有依赖项都已安装并配置正确。<br>测试和调试：</p>\n<p>使用工具（如Postman）测试API端点。<br>确保服务器能够正确处理请求并返回预期的响应。<br>域名和SSL证书：</p>\n<p>注册一个域名并将其指向你的服务器。<br>安装SSL证书以启用HTTPS，确保数据传输的安全性。<br>监控和维护：</p>\n<p>设置监控工具以跟踪服务器的性能和可用性。<br>定期更新软件和依赖项，以确保服务器的安全性和稳定性。</p>\n","excerpt":"","more":"<p>1、搭建一个小程序<br>2、部署一个服务器<br>3、做好营销  </p>\n<h2 id=\"如何搭建小程序\"><a href=\"#如何搭建小程序\" class=\"headerlink\" title=\"如何搭建小程序\"></a>如何搭建小程序</h2><ol>\n<li><p><strong>注册微信小程序账号</strong></p>\n<ul>\n<li>访问<a href=\"https://mp.weixin.qq.com/\">微信公众平台</a>，注册一个小程序账号。</li>\n</ul>\n</li>\n<li><p><strong>下载并安装开发者工具</strong></p>\n<ul>\n<li>下载<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">微信开发者工具</a>并安装。</li>\n</ul>\n</li>\n<li><p><strong>创建小程序项目</strong></p>\n<ul>\n<li>打开开发者工具，使用注册的微信小程序账号登录。</li>\n<li>点击“新建项目”，填写项目名称、目录和AppID（可在公众平台获取）。</li>\n</ul>\n</li>\n<li><p><strong>开发小程序</strong></p>\n<ul>\n<li>使用开发者工具提供的代码编辑器编写小程序代码。</li>\n<li>参考<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序开发文档</a>进行开发。</li>\n</ul>\n</li>\n<li><p><strong>调试和预览</strong></p>\n<ul>\n<li>在开发者工具中进行代码调试和预览。</li>\n</ul>\n</li>\n<li><p><strong>提交审核</strong></p>\n<ul>\n<li>开发完成后，提交小程序代码进行审核。</li>\n</ul>\n</li>\n<li><p><strong>发布上线</strong></p>\n<ul>\n<li>审核通过后，即可发布小程序上线。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"如何部署服务器\"><a href=\"#如何部署服务器\" class=\"headerlink\" title=\"如何部署服务器\"></a>如何部署服务器</h2><p>搭建小程序的后端服务器通常涉及以下几个步骤：</p>\n<p>选择服务器和操作系统：</p>\n<ul>\n<li>你可以选择云服务提供商（如阿里云、腾讯云、AWS等）来租用服务器。<br>选择适合的操作系统，如Linux（Ubuntu、CentOS等）。<br>安装必要的软件：</li>\n</ul>\n<p>安装Web服务器软件，如Nginx或Apache。</p>\n<ul>\n<li>安装数据库，如MySQL、PostgreSQL或MongoDB。<br>安装编程语言环境，如Node.js、Python、Java等。<br>编写后端代码：</li>\n</ul>\n<p>使用选择的编程语言编写后端逻辑，处理小程序的请求和数据。</p>\n<ul>\n<li>可以使用框架（如Express.js for Node.js、Django for Python等）来简化开发。<br>配置服务器：</li>\n</ul>\n<p>配置Web服务器以托管你的后端应用。<br>配置数据库以存储和检索数据。<br>配置防火墙和安全组以保护服务器。<br>部署应用：</p>\n<p>将你的后端代码部署到服务器上。<br>确保所有依赖项都已安装并配置正确。<br>测试和调试：</p>\n<p>使用工具（如Postman）测试API端点。<br>确保服务器能够正确处理请求并返回预期的响应。<br>域名和SSL证书：</p>\n<p>注册一个域名并将其指向你的服务器。<br>安装SSL证书以启用HTTPS，确保数据传输的安全性。<br>监控和维护：</p>\n<p>设置监控工具以跟踪服务器的性能和可用性。<br>定期更新软件和依赖项，以确保服务器的安全性和稳定性。</p>\n"},{"title":"新业务市场分析","comment":true,"description":"验证和开拓市场是创业的第一步，核心动作在于定义、分析市场，并做好营销","_content":"1、如何定义市场  \n2、使用PMF做分析  \n3、做好营销  \n\n\n## 如何定义市场\n\n市场的概念：所谓市场值得是满足了**某类人或组织**的**某个需求**。定义市场时不能忽略组织，因为组织是付费的主力军。举个例子，目前Windows的大多数付费都来自企业。  \n在定义市场前，需要了解市场的两个特点：动态性和模糊性。所谓动态性，指的是需求可能没变，但满足需求的方式变了。典型案例：拍摄市场，从胶卷相机过渡到手机。所以需要明白，当满足需求的方式变了后，市场就变了。所谓模糊性，指的是市场不是固定的，会随着社会变化发生解构和融合。  \n了解这两个特点后，接下来需要深层次理解需求，搞清楚逻辑，把握颗粒度和精准度，颗粒度典型案例：理想汽车，精准度典型案例：博客  \n最后一步是给我们的市场定义计算TAM，切记不能过于乐观，要客观可推敲\n\n\n## 使用PMF做分析\n\nPMF的核心是搞清楚如何用产品去匹配市场。常见的PMF有三类，产品创造市场，产品挤兑市场，产品适配市场。  \n产品创造市场：通过新技术创造市场。一般是技术革新推动的，比如手机之前拍照能力差，无法动摇胶卷相机，但当手机拍照能力跟上相机后，就会产生一个新的市场\n产品挤兑市场：通过更低的成本去动摇老市场。\n产品适配市场：通过更好的服务区动摇老市场中的细分领域。\n\n## 做好营销\n\n产品做的好，营销做不好会影响市场抢占的速度，最终竞争失败。\n\n## 其他\n\n交易的三要素是：流量、供给、履约  \n流量的组织形式大体分为两种，店铺和商品。店铺组织形式代表了一类客群的消费主张，典型的就是淘宝天猫；商品组织形式容易产生爆品，以此聚集流量利于优化供应链，典型的就是拼多多。","source":"_posts/新业务市场分析.md","raw":"---\ntitle: 新业务市场分析\ncomment: true\ndescription: 验证和开拓市场是创业的第一步，核心动作在于定义、分析市场，并做好营销\ncategories:\n- 商业分析\ntags:\n- 商分笔记\n---\n1、如何定义市场  \n2、使用PMF做分析  \n3、做好营销  \n\n\n## 如何定义市场\n\n市场的概念：所谓市场值得是满足了**某类人或组织**的**某个需求**。定义市场时不能忽略组织，因为组织是付费的主力军。举个例子，目前Windows的大多数付费都来自企业。  \n在定义市场前，需要了解市场的两个特点：动态性和模糊性。所谓动态性，指的是需求可能没变，但满足需求的方式变了。典型案例：拍摄市场，从胶卷相机过渡到手机。所以需要明白，当满足需求的方式变了后，市场就变了。所谓模糊性，指的是市场不是固定的，会随着社会变化发生解构和融合。  \n了解这两个特点后，接下来需要深层次理解需求，搞清楚逻辑，把握颗粒度和精准度，颗粒度典型案例：理想汽车，精准度典型案例：博客  \n最后一步是给我们的市场定义计算TAM，切记不能过于乐观，要客观可推敲\n\n\n## 使用PMF做分析\n\nPMF的核心是搞清楚如何用产品去匹配市场。常见的PMF有三类，产品创造市场，产品挤兑市场，产品适配市场。  \n产品创造市场：通过新技术创造市场。一般是技术革新推动的，比如手机之前拍照能力差，无法动摇胶卷相机，但当手机拍照能力跟上相机后，就会产生一个新的市场\n产品挤兑市场：通过更低的成本去动摇老市场。\n产品适配市场：通过更好的服务区动摇老市场中的细分领域。\n\n## 做好营销\n\n产品做的好，营销做不好会影响市场抢占的速度，最终竞争失败。\n\n## 其他\n\n交易的三要素是：流量、供给、履约  \n流量的组织形式大体分为两种，店铺和商品。店铺组织形式代表了一类客群的消费主张，典型的就是淘宝天猫；商品组织形式容易产生爆品，以此聚集流量利于优化供应链，典型的就是拼多多。","slug":"新业务市场分析","published":1,"date":"2024-01-22T09:13:47.220Z","updated":"2024-06-24T02:59:31.218Z","comments":1,"layout":"post","photos":[],"_id":"cm178k0pm000cisei1fgk0nfq","content":"<p>1、如何定义市场<br>2、使用PMF做分析<br>3、做好营销  </p>\n<h2 id=\"如何定义市场\"><a href=\"#如何定义市场\" class=\"headerlink\" title=\"如何定义市场\"></a>如何定义市场</h2><p>市场的概念：所谓市场值得是满足了<strong>某类人或组织</strong>的<strong>某个需求</strong>。定义市场时不能忽略组织，因为组织是付费的主力军。举个例子，目前Windows的大多数付费都来自企业。<br>在定义市场前，需要了解市场的两个特点：动态性和模糊性。所谓动态性，指的是需求可能没变，但满足需求的方式变了。典型案例：拍摄市场，从胶卷相机过渡到手机。所以需要明白，当满足需求的方式变了后，市场就变了。所谓模糊性，指的是市场不是固定的，会随着社会变化发生解构和融合。<br>了解这两个特点后，接下来需要深层次理解需求，搞清楚逻辑，把握颗粒度和精准度，颗粒度典型案例：理想汽车，精准度典型案例：博客<br>最后一步是给我们的市场定义计算TAM，切记不能过于乐观，要客观可推敲</p>\n<h2 id=\"使用PMF做分析\"><a href=\"#使用PMF做分析\" class=\"headerlink\" title=\"使用PMF做分析\"></a>使用PMF做分析</h2><p>PMF的核心是搞清楚如何用产品去匹配市场。常见的PMF有三类，产品创造市场，产品挤兑市场，产品适配市场。<br>产品创造市场：通过新技术创造市场。一般是技术革新推动的，比如手机之前拍照能力差，无法动摇胶卷相机，但当手机拍照能力跟上相机后，就会产生一个新的市场<br>产品挤兑市场：通过更低的成本去动摇老市场。<br>产品适配市场：通过更好的服务区动摇老市场中的细分领域。</p>\n<h2 id=\"做好营销\"><a href=\"#做好营销\" class=\"headerlink\" title=\"做好营销\"></a>做好营销</h2><p>产品做的好，营销做不好会影响市场抢占的速度，最终竞争失败。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>交易的三要素是：流量、供给、履约<br>流量的组织形式大体分为两种，店铺和商品。店铺组织形式代表了一类客群的消费主张，典型的就是淘宝天猫；商品组织形式容易产生爆品，以此聚集流量利于优化供应链，典型的就是拼多多。</p>\n","excerpt":"","more":"<p>1、如何定义市场<br>2、使用PMF做分析<br>3、做好营销  </p>\n<h2 id=\"如何定义市场\"><a href=\"#如何定义市场\" class=\"headerlink\" title=\"如何定义市场\"></a>如何定义市场</h2><p>市场的概念：所谓市场值得是满足了<strong>某类人或组织</strong>的<strong>某个需求</strong>。定义市场时不能忽略组织，因为组织是付费的主力军。举个例子，目前Windows的大多数付费都来自企业。<br>在定义市场前，需要了解市场的两个特点：动态性和模糊性。所谓动态性，指的是需求可能没变，但满足需求的方式变了。典型案例：拍摄市场，从胶卷相机过渡到手机。所以需要明白，当满足需求的方式变了后，市场就变了。所谓模糊性，指的是市场不是固定的，会随着社会变化发生解构和融合。<br>了解这两个特点后，接下来需要深层次理解需求，搞清楚逻辑，把握颗粒度和精准度，颗粒度典型案例：理想汽车，精准度典型案例：博客<br>最后一步是给我们的市场定义计算TAM，切记不能过于乐观，要客观可推敲</p>\n<h2 id=\"使用PMF做分析\"><a href=\"#使用PMF做分析\" class=\"headerlink\" title=\"使用PMF做分析\"></a>使用PMF做分析</h2><p>PMF的核心是搞清楚如何用产品去匹配市场。常见的PMF有三类，产品创造市场，产品挤兑市场，产品适配市场。<br>产品创造市场：通过新技术创造市场。一般是技术革新推动的，比如手机之前拍照能力差，无法动摇胶卷相机，但当手机拍照能力跟上相机后，就会产生一个新的市场<br>产品挤兑市场：通过更低的成本去动摇老市场。<br>产品适配市场：通过更好的服务区动摇老市场中的细分领域。</p>\n<h2 id=\"做好营销\"><a href=\"#做好营销\" class=\"headerlink\" title=\"做好营销\"></a>做好营销</h2><p>产品做的好，营销做不好会影响市场抢占的速度，最终竞争失败。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>交易的三要素是：流量、供给、履约<br>流量的组织形式大体分为两种，店铺和商品。店铺组织形式代表了一类客群的消费主张，典型的就是淘宝天猫；商品组织形式容易产生爆品，以此聚集流量利于优化供应链，典型的就是拼多多。</p>\n"},{"title":"架构评审关注点","comment":true,"description":"总结常见架构问题和解法","_content":"本文总结常见的架构关注点\n\n## 服务拆分\n\n服务拆分考虑的核心问题时协作问题和管理问题  \n- 问题拆解：复杂系统拆解成小系统管理难度更小，学习成本更低\n- 协作问题：业务发展带来组织细分，组织细分引发协作问题，不同组织在迭代节奏方面不完全匹配，迭代时互相影响较大，常见问题包括两类：运维协作和代码协作。代码协作上的常见问题是合代码冲突与交叉修改、影响面评估困难；运维协作上的问题是，无法给各自模块定制化运维（如发版、扩容），以及各模块间的功能共用底层资源可能互相影响\n- 系统异构：如果需要引入不同体系的技术栈，常见的方法就是约定协议后拆分相关业务到新的技术栈系统中\n\n## 系统边界划分原则\n平台化项目中，系统边界划分考虑以下几个关注点\n- 是否有利于沉淀可复用能力\n- 是否有利于降本，包括人力成本、机器成本、沟通成本\n- 是否能支撑好长线业务\n- 是否有利于团队管理和人才培养\n- 资金保障和创协\n\n## 业务迁移的关注点\n核心原则\n- 老系统必须保留双写流量，保证出现问题时能第一时间将读流量切换到老系统\n- 有关联的系统统一协同切换\n\n阶段划分\n- 双写验证：新系统只做数据验证\n- 双写灰度：逐渐灰度到新系统\n- 全量切写：验证无误后关闭老数据源的写流量\n","source":"_posts/架构评审关注点.md","raw":"---\ntitle: 架构评审关注点\ncomment: true\ndescription: 总结常见架构问题和解法\ncategories:\n- 技术总结\ntags:\n- 架构设计\n---\n本文总结常见的架构关注点\n\n## 服务拆分\n\n服务拆分考虑的核心问题时协作问题和管理问题  \n- 问题拆解：复杂系统拆解成小系统管理难度更小，学习成本更低\n- 协作问题：业务发展带来组织细分，组织细分引发协作问题，不同组织在迭代节奏方面不完全匹配，迭代时互相影响较大，常见问题包括两类：运维协作和代码协作。代码协作上的常见问题是合代码冲突与交叉修改、影响面评估困难；运维协作上的问题是，无法给各自模块定制化运维（如发版、扩容），以及各模块间的功能共用底层资源可能互相影响\n- 系统异构：如果需要引入不同体系的技术栈，常见的方法就是约定协议后拆分相关业务到新的技术栈系统中\n\n## 系统边界划分原则\n平台化项目中，系统边界划分考虑以下几个关注点\n- 是否有利于沉淀可复用能力\n- 是否有利于降本，包括人力成本、机器成本、沟通成本\n- 是否能支撑好长线业务\n- 是否有利于团队管理和人才培养\n- 资金保障和创协\n\n## 业务迁移的关注点\n核心原则\n- 老系统必须保留双写流量，保证出现问题时能第一时间将读流量切换到老系统\n- 有关联的系统统一协同切换\n\n阶段划分\n- 双写验证：新系统只做数据验证\n- 双写灰度：逐渐灰度到新系统\n- 全量切写：验证无误后关闭老数据源的写流量\n","slug":"架构评审关注点","published":1,"date":"2024-06-24T02:08:02.011Z","updated":"2024-09-14T03:00:37.648Z","comments":1,"layout":"post","photos":[],"_id":"cm178k0pn000disei2ac16thz","content":"<p>本文总结常见的架构关注点</p>\n<h2 id=\"服务拆分\"><a href=\"#服务拆分\" class=\"headerlink\" title=\"服务拆分\"></a>服务拆分</h2><p>服务拆分考虑的核心问题时协作问题和管理问题  </p>\n<ul>\n<li>问题拆解：复杂系统拆解成小系统管理难度更小，学习成本更低</li>\n<li>协作问题：业务发展带来组织细分，组织细分引发协作问题，不同组织在迭代节奏方面不完全匹配，迭代时互相影响较大，常见问题包括两类：运维协作和代码协作。代码协作上的常见问题是合代码冲突与交叉修改、影响面评估困难；运维协作上的问题是，无法给各自模块定制化运维（如发版、扩容），以及各模块间的功能共用底层资源可能互相影响</li>\n<li>系统异构：如果需要引入不同体系的技术栈，常见的方法就是约定协议后拆分相关业务到新的技术栈系统中</li>\n</ul>\n<h2 id=\"系统边界划分原则\"><a href=\"#系统边界划分原则\" class=\"headerlink\" title=\"系统边界划分原则\"></a>系统边界划分原则</h2><p>平台化项目中，系统边界划分考虑以下几个关注点</p>\n<ul>\n<li>是否有利于沉淀可复用能力</li>\n<li>是否有利于降本，包括人力成本、机器成本、沟通成本</li>\n<li>是否能支撑好长线业务</li>\n<li>是否有利于团队管理和人才培养</li>\n<li>资金保障和创协</li>\n</ul>\n<h2 id=\"业务迁移的关注点\"><a href=\"#业务迁移的关注点\" class=\"headerlink\" title=\"业务迁移的关注点\"></a>业务迁移的关注点</h2><p>核心原则</p>\n<ul>\n<li>老系统必须保留双写流量，保证出现问题时能第一时间将读流量切换到老系统</li>\n<li>有关联的系统统一协同切换</li>\n</ul>\n<p>阶段划分</p>\n<ul>\n<li>双写验证：新系统只做数据验证</li>\n<li>双写灰度：逐渐灰度到新系统</li>\n<li>全量切写：验证无误后关闭老数据源的写流量</li>\n</ul>\n","excerpt":"","more":"<p>本文总结常见的架构关注点</p>\n<h2 id=\"服务拆分\"><a href=\"#服务拆分\" class=\"headerlink\" title=\"服务拆分\"></a>服务拆分</h2><p>服务拆分考虑的核心问题时协作问题和管理问题  </p>\n<ul>\n<li>问题拆解：复杂系统拆解成小系统管理难度更小，学习成本更低</li>\n<li>协作问题：业务发展带来组织细分，组织细分引发协作问题，不同组织在迭代节奏方面不完全匹配，迭代时互相影响较大，常见问题包括两类：运维协作和代码协作。代码协作上的常见问题是合代码冲突与交叉修改、影响面评估困难；运维协作上的问题是，无法给各自模块定制化运维（如发版、扩容），以及各模块间的功能共用底层资源可能互相影响</li>\n<li>系统异构：如果需要引入不同体系的技术栈，常见的方法就是约定协议后拆分相关业务到新的技术栈系统中</li>\n</ul>\n<h2 id=\"系统边界划分原则\"><a href=\"#系统边界划分原则\" class=\"headerlink\" title=\"系统边界划分原则\"></a>系统边界划分原则</h2><p>平台化项目中，系统边界划分考虑以下几个关注点</p>\n<ul>\n<li>是否有利于沉淀可复用能力</li>\n<li>是否有利于降本，包括人力成本、机器成本、沟通成本</li>\n<li>是否能支撑好长线业务</li>\n<li>是否有利于团队管理和人才培养</li>\n<li>资金保障和创协</li>\n</ul>\n<h2 id=\"业务迁移的关注点\"><a href=\"#业务迁移的关注点\" class=\"headerlink\" title=\"业务迁移的关注点\"></a>业务迁移的关注点</h2><p>核心原则</p>\n<ul>\n<li>老系统必须保留双写流量，保证出现问题时能第一时间将读流量切换到老系统</li>\n<li>有关联的系统统一协同切换</li>\n</ul>\n<p>阶段划分</p>\n<ul>\n<li>双写验证：新系统只做数据验证</li>\n<li>双写灰度：逐渐灰度到新系统</li>\n<li>全量切写：验证无误后关闭老数据源的写流量</li>\n</ul>\n"},{"title":"订单系统(OFC)架构设计","comment":true,"description":null,"_content":"在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。\n\n## 技术挑战\n\n面临的挑战与业务特点有关，订单访问QPS100万，峰值提单400万，概括而言就是大流量5000万单、高并发、多业务线\n主要的解决手段是流量拆分、业务隔离、读写流量拆分、存储异构\n\n## 架构演进\n\n不同阶段要解决的主要问题时不一样的\n\n| 阶段       | 业务特征             | 系统特征   | 主要挑战           | 解决方案                                                     |\n|----------|------------------|--------|----------------|----------------------------------------------------------|\n| 订单模块     | 从0快速开始，单量小，业务简单  | 公共系统   | 迭代效率           | 支持快速发布、快速试错，jar包复用彼此功能，公用数据库                             |\n| 订单系统     | 单量到10万，业务流程复杂    | 独立系统   | 组织划分变化，代码复杂性上升 | 独立成内聚的服务，独占数据库                                           |\n| 订单系统域    | 组织扩展+快速膨胀        | 系统群    | 数据膨胀，读写压力增加    | 读写分离、功能解耦进一步的服务拆分、非骨干链路异步化。可将订单系统拆分为查询、交易、异步处理、统计处理四个子模块 |\n| 单元化订单系统域 | 容灾，业务快速扩展，2000万单 | 单元化系统群 | 存储瓶颈、机房瓶颈      | 将数据和服务切分为多个逻辑单元、控制流量的分配、数据互备                             |\n| 订单平台     | 降本增效，交易能力复用      ||||\n\n\nF&Q  \n\n为什么不建议无限制的增加从库数量？ \n- 主库负载增加：在MySQL复制架构中，主库负责生成并发送二进制日志（binlog）给所有从库。当从库数量增加时，主库需要向更多的从库发送相同的二进制日志，这会增加主库的网络I/O负载和CPU负载。尽管发送二进制日志是一个相对轻量级的操作，但当从库数量非常多时，这种负载的累积也可能成为主库的瓶颈。\n- 网络带宽和延迟：在分布式环境中，从库可能分布在不同的地理位置，网络带宽和延迟会影响二进制日志的传输效率。从库越多，受网络条件限制的可能性越大，特别是当一些从库位于网络条件较差的地区时，复制延迟的问题会更加明显。\n- 从库处理能力：从库需要接收并应用主库发送过来的二进制日志。这个过程涉及到日志的解析和数据的写入操作，会占用从库的CPU和I/O资源。如果从库的硬件资源不足以快速处理这些操作，或者从库上有大量的读取请求竞争资源，也会导致复制延迟。\n- 锁竞争：在某些情况下，从库应用二进制日志时可能会遇到锁竞争的问题，尤其是当复制的操作涉及到大量行锁或表锁时。锁竞争会延迟从库应用二进制日志的速度，从而导致复制延迟。\n- 复制配置和管理：从库过多也意味着复制架构更加复杂，需要更多的管理和监控工作。不恰当的复制配置或监控不足可能导致复制延迟问题被忽视，或者延迟问题的诊断和解决变得更加困难。\n- 总的来说，从库过多可能会从多个方面增加系统的复杂性和负载，导致复制延迟。在设计和部署MySQL复制架构时，需要综合考虑从库的数量、硬件资源、网络条件等因素，以确保复制的高效和稳定。\n\n单元化的设计关键是什么？\n- 如何路由流量：建设路由服务，通过用户信息将流量路由到不同的单元\n- 如何同步数据\n- 如何迁移流量（发生问题时）","source":"_posts/订单领域建设.md","raw":"---\ntitle: 订单系统(OFC)架构设计\ncomment: true\ndescription: \ncategories:\n- 技术总结\ntags:\n- 交易履约\n---\n在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。\n\n## 技术挑战\n\n面临的挑战与业务特点有关，订单访问QPS100万，峰值提单400万，概括而言就是大流量5000万单、高并发、多业务线\n主要的解决手段是流量拆分、业务隔离、读写流量拆分、存储异构\n\n## 架构演进\n\n不同阶段要解决的主要问题时不一样的\n\n| 阶段       | 业务特征             | 系统特征   | 主要挑战           | 解决方案                                                     |\n|----------|------------------|--------|----------------|----------------------------------------------------------|\n| 订单模块     | 从0快速开始，单量小，业务简单  | 公共系统   | 迭代效率           | 支持快速发布、快速试错，jar包复用彼此功能，公用数据库                             |\n| 订单系统     | 单量到10万，业务流程复杂    | 独立系统   | 组织划分变化，代码复杂性上升 | 独立成内聚的服务，独占数据库                                           |\n| 订单系统域    | 组织扩展+快速膨胀        | 系统群    | 数据膨胀，读写压力增加    | 读写分离、功能解耦进一步的服务拆分、非骨干链路异步化。可将订单系统拆分为查询、交易、异步处理、统计处理四个子模块 |\n| 单元化订单系统域 | 容灾，业务快速扩展，2000万单 | 单元化系统群 | 存储瓶颈、机房瓶颈      | 将数据和服务切分为多个逻辑单元、控制流量的分配、数据互备                             |\n| 订单平台     | 降本增效，交易能力复用      ||||\n\n\nF&Q  \n\n为什么不建议无限制的增加从库数量？ \n- 主库负载增加：在MySQL复制架构中，主库负责生成并发送二进制日志（binlog）给所有从库。当从库数量增加时，主库需要向更多的从库发送相同的二进制日志，这会增加主库的网络I/O负载和CPU负载。尽管发送二进制日志是一个相对轻量级的操作，但当从库数量非常多时，这种负载的累积也可能成为主库的瓶颈。\n- 网络带宽和延迟：在分布式环境中，从库可能分布在不同的地理位置，网络带宽和延迟会影响二进制日志的传输效率。从库越多，受网络条件限制的可能性越大，特别是当一些从库位于网络条件较差的地区时，复制延迟的问题会更加明显。\n- 从库处理能力：从库需要接收并应用主库发送过来的二进制日志。这个过程涉及到日志的解析和数据的写入操作，会占用从库的CPU和I/O资源。如果从库的硬件资源不足以快速处理这些操作，或者从库上有大量的读取请求竞争资源，也会导致复制延迟。\n- 锁竞争：在某些情况下，从库应用二进制日志时可能会遇到锁竞争的问题，尤其是当复制的操作涉及到大量行锁或表锁时。锁竞争会延迟从库应用二进制日志的速度，从而导致复制延迟。\n- 复制配置和管理：从库过多也意味着复制架构更加复杂，需要更多的管理和监控工作。不恰当的复制配置或监控不足可能导致复制延迟问题被忽视，或者延迟问题的诊断和解决变得更加困难。\n- 总的来说，从库过多可能会从多个方面增加系统的复杂性和负载，导致复制延迟。在设计和部署MySQL复制架构时，需要综合考虑从库的数量、硬件资源、网络条件等因素，以确保复制的高效和稳定。\n\n单元化的设计关键是什么？\n- 如何路由流量：建设路由服务，通过用户信息将流量路由到不同的单元\n- 如何同步数据\n- 如何迁移流量（发生问题时）","slug":"订单领域建设","published":1,"date":"2024-06-24T02:08:02.011Z","updated":"2024-06-25T03:34:58.232Z","comments":1,"layout":"post","photos":[],"_id":"cm178k0pn000giseiag9nd2wf","content":"<p>在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。</p>\n<h2 id=\"技术挑战\"><a href=\"#技术挑战\" class=\"headerlink\" title=\"技术挑战\"></a>技术挑战</h2><p>面临的挑战与业务特点有关，订单访问QPS100万，峰值提单400万，概括而言就是大流量5000万单、高并发、多业务线<br>主要的解决手段是流量拆分、业务隔离、读写流量拆分、存储异构</p>\n<h2 id=\"架构演进\"><a href=\"#架构演进\" class=\"headerlink\" title=\"架构演进\"></a>架构演进</h2><p>不同阶段要解决的主要问题时不一样的</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>业务特征</th>\n<th>系统特征</th>\n<th>主要挑战</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>订单模块</td>\n<td>从0快速开始，单量小，业务简单</td>\n<td>公共系统</td>\n<td>迭代效率</td>\n<td>支持快速发布、快速试错，jar包复用彼此功能，公用数据库</td>\n</tr>\n<tr>\n<td>订单系统</td>\n<td>单量到10万，业务流程复杂</td>\n<td>独立系统</td>\n<td>组织划分变化，代码复杂性上升</td>\n<td>独立成内聚的服务，独占数据库</td>\n</tr>\n<tr>\n<td>订单系统域</td>\n<td>组织扩展+快速膨胀</td>\n<td>系统群</td>\n<td>数据膨胀，读写压力增加</td>\n<td>读写分离、功能解耦进一步的服务拆分、非骨干链路异步化。可将订单系统拆分为查询、交易、异步处理、统计处理四个子模块</td>\n</tr>\n<tr>\n<td>单元化订单系统域</td>\n<td>容灾，业务快速扩展，2000万单</td>\n<td>单元化系统群</td>\n<td>存储瓶颈、机房瓶颈</td>\n<td>将数据和服务切分为多个逻辑单元、控制流量的分配、数据互备</td>\n</tr>\n<tr>\n<td>订单平台</td>\n<td>降本增效，交易能力复用</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>F&amp;Q  </p>\n<p>为什么不建议无限制的增加从库数量？ </p>\n<ul>\n<li>主库负载增加：在MySQL复制架构中，主库负责生成并发送二进制日志（binlog）给所有从库。当从库数量增加时，主库需要向更多的从库发送相同的二进制日志，这会增加主库的网络I&#x2F;O负载和CPU负载。尽管发送二进制日志是一个相对轻量级的操作，但当从库数量非常多时，这种负载的累积也可能成为主库的瓶颈。</li>\n<li>网络带宽和延迟：在分布式环境中，从库可能分布在不同的地理位置，网络带宽和延迟会影响二进制日志的传输效率。从库越多，受网络条件限制的可能性越大，特别是当一些从库位于网络条件较差的地区时，复制延迟的问题会更加明显。</li>\n<li>从库处理能力：从库需要接收并应用主库发送过来的二进制日志。这个过程涉及到日志的解析和数据的写入操作，会占用从库的CPU和I&#x2F;O资源。如果从库的硬件资源不足以快速处理这些操作，或者从库上有大量的读取请求竞争资源，也会导致复制延迟。</li>\n<li>锁竞争：在某些情况下，从库应用二进制日志时可能会遇到锁竞争的问题，尤其是当复制的操作涉及到大量行锁或表锁时。锁竞争会延迟从库应用二进制日志的速度，从而导致复制延迟。</li>\n<li>复制配置和管理：从库过多也意味着复制架构更加复杂，需要更多的管理和监控工作。不恰当的复制配置或监控不足可能导致复制延迟问题被忽视，或者延迟问题的诊断和解决变得更加困难。</li>\n<li>总的来说，从库过多可能会从多个方面增加系统的复杂性和负载，导致复制延迟。在设计和部署MySQL复制架构时，需要综合考虑从库的数量、硬件资源、网络条件等因素，以确保复制的高效和稳定。</li>\n</ul>\n<p>单元化的设计关键是什么？</p>\n<ul>\n<li>如何路由流量：建设路由服务，通过用户信息将流量路由到不同的单元</li>\n<li>如何同步数据</li>\n<li>如何迁移流量（发生问题时）</li>\n</ul>\n","excerpt":"","more":"<p>在供应链领域，OFC系统扮演着承上启下的重要角色。对上承接各各类订单，对下派发生产任务，是履约链路上的核心系统，除此之外，OFC还负责管理生产、履约环节的关键信息，保障上下游系统能及时感知业务变化。</p>\n<h2 id=\"技术挑战\"><a href=\"#技术挑战\" class=\"headerlink\" title=\"技术挑战\"></a>技术挑战</h2><p>面临的挑战与业务特点有关，订单访问QPS100万，峰值提单400万，概括而言就是大流量5000万单、高并发、多业务线<br>主要的解决手段是流量拆分、业务隔离、读写流量拆分、存储异构</p>\n<h2 id=\"架构演进\"><a href=\"#架构演进\" class=\"headerlink\" title=\"架构演进\"></a>架构演进</h2><p>不同阶段要解决的主要问题时不一样的</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>业务特征</th>\n<th>系统特征</th>\n<th>主要挑战</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>订单模块</td>\n<td>从0快速开始，单量小，业务简单</td>\n<td>公共系统</td>\n<td>迭代效率</td>\n<td>支持快速发布、快速试错，jar包复用彼此功能，公用数据库</td>\n</tr>\n<tr>\n<td>订单系统</td>\n<td>单量到10万，业务流程复杂</td>\n<td>独立系统</td>\n<td>组织划分变化，代码复杂性上升</td>\n<td>独立成内聚的服务，独占数据库</td>\n</tr>\n<tr>\n<td>订单系统域</td>\n<td>组织扩展+快速膨胀</td>\n<td>系统群</td>\n<td>数据膨胀，读写压力增加</td>\n<td>读写分离、功能解耦进一步的服务拆分、非骨干链路异步化。可将订单系统拆分为查询、交易、异步处理、统计处理四个子模块</td>\n</tr>\n<tr>\n<td>单元化订单系统域</td>\n<td>容灾，业务快速扩展，2000万单</td>\n<td>单元化系统群</td>\n<td>存储瓶颈、机房瓶颈</td>\n<td>将数据和服务切分为多个逻辑单元、控制流量的分配、数据互备</td>\n</tr>\n<tr>\n<td>订单平台</td>\n<td>降本增效，交易能力复用</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>F&amp;Q  </p>\n<p>为什么不建议无限制的增加从库数量？ </p>\n<ul>\n<li>主库负载增加：在MySQL复制架构中，主库负责生成并发送二进制日志（binlog）给所有从库。当从库数量增加时，主库需要向更多的从库发送相同的二进制日志，这会增加主库的网络I&#x2F;O负载和CPU负载。尽管发送二进制日志是一个相对轻量级的操作，但当从库数量非常多时，这种负载的累积也可能成为主库的瓶颈。</li>\n<li>网络带宽和延迟：在分布式环境中，从库可能分布在不同的地理位置，网络带宽和延迟会影响二进制日志的传输效率。从库越多，受网络条件限制的可能性越大，特别是当一些从库位于网络条件较差的地区时，复制延迟的问题会更加明显。</li>\n<li>从库处理能力：从库需要接收并应用主库发送过来的二进制日志。这个过程涉及到日志的解析和数据的写入操作，会占用从库的CPU和I&#x2F;O资源。如果从库的硬件资源不足以快速处理这些操作，或者从库上有大量的读取请求竞争资源，也会导致复制延迟。</li>\n<li>锁竞争：在某些情况下，从库应用二进制日志时可能会遇到锁竞争的问题，尤其是当复制的操作涉及到大量行锁或表锁时。锁竞争会延迟从库应用二进制日志的速度，从而导致复制延迟。</li>\n<li>复制配置和管理：从库过多也意味着复制架构更加复杂，需要更多的管理和监控工作。不恰当的复制配置或监控不足可能导致复制延迟问题被忽视，或者延迟问题的诊断和解决变得更加困难。</li>\n<li>总的来说，从库过多可能会从多个方面增加系统的复杂性和负载，导致复制延迟。在设计和部署MySQL复制架构时，需要综合考虑从库的数量、硬件资源、网络条件等因素，以确保复制的高效和稳定。</li>\n</ul>\n<p>单元化的设计关键是什么？</p>\n<ul>\n<li>如何路由流量：建设路由服务，通过用户信息将流量路由到不同的单元</li>\n<li>如何同步数据</li>\n<li>如何迁移流量（发生问题时）</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm178k0pj0002isei1z0k2lzr","category_id":"cm178k0pk0004isei5x28e0cu","_id":"cm178k0pm0009isei9oqxhod1"},{"post_id":"cm178k0pk0003iseih4nbbkgb","category_id":"cm178k0pl0006iseihwbn29sm","_id":"cm178k0pm000biseie6t9g5hu"},{"post_id":"cm178k0pn000disei2ac16thz","category_id":"cm178k0pk0004isei5x28e0cu","_id":"cm178k0po000jisei49n43wiw"},{"post_id":"cm178k0pn000giseiag9nd2wf","category_id":"cm178k0pk0004isei5x28e0cu","_id":"cm178k0po000kisei1e5nfs5k"},{"post_id":"cm178k0pm000cisei1fgk0nfq","category_id":"cm178k0pn000eiseibl0hd0ny","_id":"cm178k0po000miseiffea8iz8"}],"PostTag":[{"post_id":"cm178k0pj0002isei1z0k2lzr","tag_id":"cm178k0pl0005iseia217gt3g","_id":"cm178k0pm0008iseiaqlzaava"},{"post_id":"cm178k0pk0003iseih4nbbkgb","tag_id":"cm178k0pm0007isei5y2d0s29","_id":"cm178k0pm000aisei7sws75cs"},{"post_id":"cm178k0pm000cisei1fgk0nfq","tag_id":"cm178k0pm0007isei5y2d0s29","_id":"cm178k0pn000fisei2nvi1tgb"},{"post_id":"cm178k0pn000giseiag9nd2wf","tag_id":"cm178k0pl0005iseia217gt3g","_id":"cm178k0po000iiseigq79axsh"},{"post_id":"cm178k0pn000disei2ac16thz","tag_id":"cm178k0po000hisei6au5e60z","_id":"cm178k0po000lisei9897cqst"}],"Tag":[{"name":"交易履约","_id":"cm178k0pl0005iseia217gt3g"},{"name":"商分笔记","_id":"cm178k0pm0007isei5y2d0s29"},{"name":"架构设计","_id":"cm178k0po000hisei6au5e60z"}]}}